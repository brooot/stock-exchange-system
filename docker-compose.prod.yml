services:
  # Redis 缓存和消息队列服务
  redis:
    image: redis:7-alpine
    container_name: stock-redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - stock-network
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M  # 增加内存限制
        reservations:
          cpus: '0.1'
          memory: 200M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # PostgreSQL数据库服务（保持不变）
  postgres:
    image: postgres:16-alpine
    container_name: stock-postgres
    env_file:
      - .env.production
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - stock-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d stock_db']
      interval: 5s
      timeout: 5s
      retries: 5

  # 后端服务
  stock-back-end:
    image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_REPO_NAME}:backend-latest
    platform: linux/amd64
    container_name: stock-back-end
    # 限制运行时资源使用（针对2核2G服务器优化）
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 200M
    env_file:
      - .env.production
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_HOST=${DATABASE_HOST:-postgres}
      - DATABASE_PORT=${DATABASE_PORT:-5432}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_SYNC=${DATABASE_SYNC:-false}
      - DATABASE_URL=postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@${DATABASE_HOST:-postgres}:${DATABASE_PORT:-5432}/${DATABASE_NAME}?schema=public
      # Redis 配置
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - NODE_OPTIONS=--max-old-space-size=512
    # 不直接暴露端口，通过nginx代理
    expose:
      - '3001'
      - '443'
    volumes:
      - ./certs:/app/certs:ro # 挂载SSL证书目录
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stock-network

  # 前端服务
  stock-fe:
    image: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}/${DOCKER_REPO_NAME}:frontend-latest
    platform: linux/amd64
    container_name: stock-fe
    environment:
      - PORT=3000
      - NODE_OPTIONS=--max-old-space-size=256
    # 限制运行时资源使用（针对2核2G服务器优化）
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 600M
        reservations:
          cpus: '0.4'
          memory: 300M
    env_file:
      - .env.production
    # 不直接暴露端口，通过nginx代理
    expose:
      - '3000'
    depends_on:
      - stock-back-end
    networks:
      - stock-network
    restart: unless-stopped

  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: stock-nginx
    ports:
      - '80:80' # HTTP端口
      - '443:443' # HTTPS端口
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - stock-fe
      - stock-back-end
    networks:
      - stock-network
    restart: unless-stopped
    # 限制运行时资源使用
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100M
        reservations:
          cpus: '0.1'
          memory: 50M

networks:
  stock-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
