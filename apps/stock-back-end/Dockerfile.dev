# 多阶段构建：基础阶段
FROM node:22.17.0-alpine AS base

# 安装系统依赖
RUN apk add --no-cache dumb-init curl git postgresql-client

# 设置工作目录
WORKDIR /app

# 分步安装工具以减少内存使用，并清理缓存
RUN npm install -g pnpm@10.14.0 && npm cache clean --force
RUN npm install -g nx@21.2.2 && npm cache clean --force
RUN npm install -g nodemon@3.1.7 && npm cache clean --force

# 依赖安装阶段
FROM base AS deps

# 复制依赖文件
COPY package.json pnpm-lock.yaml ./
COPY nx.json tsconfig.base.json ./
COPY apps/stock-back-end/project.json ./apps/stock-back-end/
COPY apps/stock-back-end/tsconfig*.json ./apps/stock-back-end/

# 配置 pnpm 以确保模块可以被正确解析
RUN echo 'shamefully-hoist=true' > .npmrc
RUN echo 'node-linker=hoisted' >> .npmrc

# 安装所有依赖（包括开发依赖，确保能编译原生模块）
RUN pnpm install --frozen-lockfile

# bcryptjs是纯JavaScript实现，无需重新构建

# 开发阶段
FROM deps AS development

# 复制 Prisma schema
COPY prisma ./prisma

# 生成 Prisma Client，指定正确的平台
RUN npx prisma generate --generator client

# 确保 Prisma 二进制文件存在
RUN ls -la node_modules/.prisma/client/ || echo "Prisma client not found"

# 创建必要的目录
RUN mkdir -p apps/stock-back-end/src dist/apps/stock-back-end

# 复制启动脚本
COPY apps/stock-back-end/start-dev.sh /app/start-dev.sh
RUN chmod +x /app/start-dev.sh

# 暴露端口
EXPOSE 3001 9229

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3001/api || exit 1

# 设置工作目录到项目根目录下的后端应用
WORKDIR /app/apps/stock-back-end

# 使用启动脚本
CMD ["/bin/sh", "/app/start-dev.sh"]
